#!/bin/bash

# The pre_start_cartridge and pre_stop_cartridge hooks are *SOURCED*
# immediately before (re)starting or stopping the specified cartridge.
# They are able to make any desired environment variable changes as
# well as other adjustments to the application environment.

# The post_start_cartridge and post_stop_cartridge hooks are executed
# immediately after (re)starting or stopping the specified cartridge.

# Exercise caution when adding commands to these hooks.  They can
# prevent your application from stopping cleanly or starting at all.
# Application start and stop is subject to different timeouts
# throughout the system.

git_repo_owner="openshift"
git_repo_folder="capedwarf-example-modules"

git_repo="${git_repo_owner}/${git_repo_folder}"

source $OPENSHIFT_CARTRIDGE_SDK_BASH

runtime_dir=${OPENSHIFT_HOMEDIR}app-root/runtime/
cd_home=${runtime_dir}capedwarf/
if [ ! -d "${cd_home}" ]; then
	mkdir ${cd_home}
fi
debug_log=${cd_home}install.log
date > $debug_log

cd_modules=${cd_home}capedwarf-modules/jboss-as7-modules/
cd_transformer=${cd_home}capedwarf-modules/transformer/
cd_transformer_script=${cd_transformer}transform.sh

local_version_file=${cd_home}local_version.ini
if [ ! -f "${local_version_file}" ]; then
	echo "capedwarf_local_version=0" > ${local_version_file}
fi

export OPENSHIFT_JBOSSAS_MODULE_PATH=${OPENSHIFT_HOMEDIR}app-root/runtime/capedwarf/capedwarf-modules/jboss-as7-modules

source ${runtime_dir}repo/.openshift/action_hooks/utils.sh
echo "Sourced utils.sh" >> $debug_log

#set capedwarf_local_version
source /dev/stdin <<< "$(cat ${local_version_file})"

echo "Sourced local_version_file" >> $debug_log
echo "capedwarf_local_version: ${capedwarf_local_version}" >> $debug_log

load_tags
num_of_tags=${#git_tags[@]}

git_tag=${git_tags[${num_of_tags} - 1]}
set_upstream_version
echo "Git tag ${git_tag}; capedwarf_upstream_version: ${capedwarf_upstream_version}; as_required: ${as_required}" >> $debug_log

is_up_to_date
if [ ${is_up_to_date_r} == "false" ]; then
	echo "Found new CapeDwarf modules ..." | tee -a $debug_log
	
	echo "num_of_tags: ${num_of_tags}" >> $debug_log
	for (( i=0; $i < $num_of_tags; i=$i+1 )); do
		echo "Trying tag i: ${i}" >> $debug_log
		#skip first, it is already set
		if [ $i -gt 0 ]; then
			git_tag=${git_tags[${num_of_tags} - 1 - $i]}
			echo "Git tag ${git_tag}" >> $debug_log
			set_upstream_version
			echo "capedwarf_upstream_version: ${capedwarf_upstream_version}; as_required: ${as_required}" >> $debug_log
			
			is_up_to_date
			if [ ${is_up_to_date_r} == "true" ]; then
				echo "Latest compatible version already installed." | tee -a $debug_log
				break;
			fi
		fi 
		
		check_requirements
		if [ ${check_requirements_r} == "true" ]; then
			echo "Updating CapeDwarf modules ..." | tee -a $debug_log
			update_capedwarf
			echo "capedwarf_local_version="${capedwarf_upstream_version} > ${local_version_file}
			echo "CapeDwarf installed." | tee -a $debug_log
			break
		fi

	done
fi

echo "Defining java opts..." >> $debug_log
### re defrine JAVA_OPTS the same way as JBossAS cartride does, because there is no way to just add to JAVA_OPTS
max_memory_bytes=$(oo-cgroup-read memory.limit_in_bytes)
max_memory_mb=$(expr $max_memory_bytes / 1048576)
jvm_heap_ratio=0.75
jvm_perm_ratio=0.30
max_heap=$( echo "$max_memory_mb * $jvm_heap_ratio" | bc | awk '{print int($1+0.5)}')
max_perm=$( echo "$max_heap * $jvm_perm_ratio" | bc | awk '{print int($1+0.5)}')

if [ $max_memory_mb -lt 1024 ]; then
  memory_options="-client -Xmx${max_heap}m -XX:MaxPermSize=${max_perm}m -XX:+AggressiveOpts -Dorg.apache.tomcat.util.LOW_MEMORY=true"
else
  memory_options="-Xmx${max_heap}m -XX:MaxPermSize=${max_perm}m -XX:+AggressiveOpts"
fi

JAVA_OPTS="$memory_options -Dorg.jboss.resolver.warning=true -Djava.net.preferIPv4Stack=true -Dfile.encoding=UTF-8 -Djava.net.preferIPv4Stack=true -Djboss.node.name=${OPENSHIFT_GEAR_DNS} -Djgroups.bind_addr=${OPENSHIFT_JBOSSAS_IP}"

JAVA_OPTS="${JAVA_OPTS} -Djboss.server.data.dir=${OPENSHIFT_DATA_DIR}"jboss-as7
JAVA_OPTS="${JAVA_OPTS} -Dcom.google.appengine.runtime.environment=Production"
export JAVA_OPTS="${JAVA_OPTS} -Dorg.apache.tomcat.util.net.MAX_THREADS=20"
